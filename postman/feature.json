{
	"info": {
		"_postman_id": "e5480106-4eac-4851-94ab-bc024b60080c",
		"name": "Test Explore With Me - Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25953607"
	},
	"item": [
		{
			"name": "Validaton",
			"item": [
				{
					"name": "Добавление комментария длиной < 5 символов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария длиной > 500 символов",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibub\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/{1}/comments/{1}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"{1}",
								"comments",
								"{1}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibub\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/{1}/comments/{1}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"{1}",
								"comments",
								"{1}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function() {\r",
							"    pm.response.to.be.badRequest;\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Creation",
			"item": [
				{
					"name": "Создание пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user@user.com\"').to.eql('user@user.com');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"user\"').to.eql('user');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user\",\r\n    \"email\": \"user@user.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание пользователя с id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test user 'email' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData.email, '\"email\" must be \"user2@user.com\"').to.eql('user2@user.com');\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"user2\"').to.eql('user2');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"user2\",\r\n    \"email\": \"user2@user.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание категории",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test user 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test user 'name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('name');\r",
									"    pm.expect(jsonData.name, '\"name\" must be \"Lorem ipsum dolor si\"').to.eql('Lorem ipsum dolor si');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Lorem ipsum dolor si\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test event 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"annotation\":\"Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.\",\r\n\"category\":1,\r\n\"description\":\"Voluptatibus provident beatae eligendi harum aut ipsum inventore. Facere a doloremque non reprehenderit architecto unde. Et ratione tempore cupiditate incidunt. Est aspernatur sed error doloribus. Iusto saepe culpa odit cupiditate. Repellendus vero aut atque aspernatur recusandae qui.\\n \\rNostrum praesentium nesciunt modi enim. Laborum similique exercitationem minima beatae soluta totam qui. Sed ut quae modi tempore et velit aliquid in sit.\\n \\rBlanditiis dolor ut inventore fuga quia molestiae sit. Est veniam sit saepe distinctio aut similique modi iure et. Aut minus qui quam voluptatem. Perspiciatis quia dolorum minus ut et. Optio voluptatem sequi sunt. Est aut sint voluptatem.\",\r\n\"eventDate\":\"2027-11-06 02:16:15\",\r\n\"location\":{\"lat\":46.7483,\"lon\":-90.2616},\r\n\"paid\":\"true\",\r\n\"participantLimit\":\"594\",\r\n\"requestModeration\":\"false\",\r\n\"title\":\"Provident architecto explicabo doloremque hic eveniet non inventore aut.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание события c id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test event 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"annotation\":\"2Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.\",\r\n\"category\":1,\r\n\"description\":\"2Voluptatibus provident beatae eligendi harum aut ipsum inventore. Facere a doloremque non reprehenderit architecto unde. Et ratione tempore cupiditate incidunt. Est aspernatur sed error doloribus. Iusto saepe culpa odit cupiditate. Repellendus vero aut atque aspernatur recusandae qui.\\n \\rNostrum praesentium nesciunt modi enim. Laborum similique exercitationem minima beatae soluta totam qui. Sed ut quae modi tempore et velit aliquid in sit.\\n \\rBlanditiis dolor ut inventore fuga quia molestiae sit. Est veniam sit saepe distinctio aut similique modi iure et. Aut minus qui quam voluptatem. Perspiciatis quia dolorum minus ut et. Optio voluptatem sequi sunt. Est aut sint voluptatem.\",\r\n\"eventDate\":\"2028-11-06 02:16:15\",\r\n\"location\":{\"lat\":47.7483,\"lon\":-90.2616},\r\n\"paid\":\"true\",\r\n\"participantLimit\":\"594\",\r\n\"requestModeration\":\"false\",\r\n\"title\":\"2Provident architecto explicabo doloremque hic eveniet non inventore aut.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"events"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create comment",
			"item": [
				{
					"name": "Добавление комментария от несуществующего пользователя",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/20/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"20",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария на несуществующее событие",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"content\"').to.eql('content');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"    pm.expect(jsonData.user.name, '\"user.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"    pm.expect(jsonData.event.annotation, '\"event.annotation\"  must be \"Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.\"').to.eql('Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"    pm.expect(jsonData.event.category.id, '\"event.category.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"    pm.expect(jsonData.event.category.name, '\"event.category.name\"  must be \"Lorem ipsum dolor si\"').to.eql('Lorem ipsum dolor si');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"    pm.expect(jsonData.event.initiator.id, '\"event.initiator.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"    pm.expect(jsonData.event.initiator.name, '\"event.initiator.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be false').to.eql(false);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария c id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"    pm.expect(jsonData.user.name, '\"user.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"    pm.expect(jsonData.event.annotation, '\"event.annotation\"  must be \"Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.\"').to.eql('Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"    pm.expect(jsonData.event.category.id, '\"event.category.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"    pm.expect(jsonData.event.category.name, '\"event.category.name\"  must be \"Lorem ipsum dolor si\"').to.eql('Lorem ipsum dolor si');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"    pm.expect(jsonData.event.initiator.id, '\"event.initiator.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"    pm.expect(jsonData.event.initiator.name, '\"event.initiator.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be false').to.eql(false);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"comment 2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария c id 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"comment 3\"').to.eql('comment 3');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"    pm.expect(jsonData.user.name, '\"user.name\"  must be \"user2\"').to.eql('user2');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"    pm.expect(jsonData.event.annotation, '\"event.annotation\"  must be \"2Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.\"').to.eql('2Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"    pm.expect(jsonData.event.category.id, '\"event.category.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"    pm.expect(jsonData.event.category.name, '\"event.category.name\"  must be \"Lorem ipsum dolor si\"').to.eql('Lorem ipsum dolor si');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"    pm.expect(jsonData.event.initiator.id, '\"event.initiator.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"    pm.expect(jsonData.event.initiator.name, '\"event.initiator.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be false').to.eql(false);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"comment 3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update comment",
			"item": [
				{
					"name": "Обновление несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"NEW content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария от пользователя не яв-ся комментатором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"NEW content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"    pm.expect(jsonData.user.name, '\"user.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"    pm.expect(jsonData.event.annotation, '\"event.annotation\"  must be \"Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.\"').to.eql('Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"    pm.expect(jsonData.event.category.id, '\"event.category.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"    pm.expect(jsonData.event.category.name, '\"event.category.name\"  must be \"Lorem ipsum dolor si\"').to.eql('Lorem ipsum dolor si');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"    pm.expect(jsonData.event.initiator.id, '\"event.initiator.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"    pm.expect(jsonData.event.initiator.name, '\"event.initiator.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"NEW content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get comment by id",
			"item": [
				{
					"name": "Получить несуществующий комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"    pm.expect(jsonData.user.name, '\"user.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"    pm.expect(jsonData.event.annotation, '\"event.annotation\"  must be \"Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.\"').to.eql('Doloremque consequatur enim dolore soluta. Itaque ut incidunt expedita tempora id. Asperiores minus blanditiis suscipit et impedit occaecati consectetur.');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"    pm.expect(jsonData.event.category.id, '\"event.category.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"    pm.expect(jsonData.event.category.name, '\"event.category.name\"  must be \"Lorem ipsum dolor si\"').to.eql('Lorem ipsum dolor si');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"    pm.expect(jsonData.event.initiator.id, '\"event.initiator.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"    pm.expect(jsonData.event.initiator.name, '\"event.initiator.name\"  must be \"user\"').to.eql('user');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all event comments",
			"item": [
				{
					"name": "Получение комментариев на несуществующий event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events/20/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"20",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев без сортировки и без пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('content');\r",
									"    pm.expect(jsonData[1].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('id');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event).to.have.property('id');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[1].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев c сортировкой и с пагинацией",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events/1/comments?sortByTime=true&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sortByTime",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all user comments",
			"item": [
				{
					"name": "Получение комментариев несуществующего user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/20/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"20",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев без сортировки и без пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('content');\r",
									"    pm.expect(jsonData[1].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('id');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event).to.have.property('id');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[1].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев c сортировкой и с пагинацией",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/1/comments?sortByTime=true&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sortByTime",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all comments",
			"item": [
				{
					"name": "Получение комментариев по тексту",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?text=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев по id c пагинацией",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?comments=2,3&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "comments",
									"value": "2,3"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев по датам с сортитровкой",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('content');\r",
									"    pm.expect(jsonData[1].content, '\"content\" must be \"comment 3\"').to.eql('comment 3');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('id');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event).to.have.property('id');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[1].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[2] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('id');\r",
									"    pm.expect(jsonData[2].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[2] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('content');\r",
									"    pm.expect(jsonData[2].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[2] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('user');\r",
									"    pm.expect(jsonData[2].user).to.have.property('id');\r",
									"    pm.expect(jsonData[2].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[2] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('user');\r",
									"    pm.expect(jsonData[2].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[2] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('event');\r",
									"    pm.expect(jsonData[2].event).to.have.property('id');\r",
									"    pm.expect(jsonData[2].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[2] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[2] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[2].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?rangeStart=2020-11-06 02:16:15&rangeEnd=2025-11-06 02:16:15&sortByTime=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2020-11-06 02:16:15"
								},
								{
									"key": "rangeEnd",
									"value": "2025-11-06 02:16:15"
								},
								{
									"key": "sortByTime",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete comments",
			"item": [
				{
					"name": "Удаление комментариев по тексту",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/delete?text=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"delete"
							],
							"query": [
								{
									"key": "text",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев после удаления по тексту",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 3\"').to.eql('comment 3');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('content');\r",
									"    pm.expect(jsonData[1].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('id');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event).to.have.property('id');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[1].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментариев по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/delete?comments=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"delete"
							],
							"query": [
								{
									"key": "comments",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев после удаления по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 3\"').to.eql('comment 3');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментариев по времени",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/delete?rangeStart=2020-11-06 02:16:15&rangeEnd=2025-11-06 02:16:15",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"delete"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2020-11-06 02:16:15"
								},
								{
									"key": "rangeEnd",
									"value": "2025-11-06 02:16:15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев после удаления по времени",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete comment by user",
			"item": [
				{
					"name": "Удаление несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"comment 1\"').to.eql('comment 1');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"comment 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария от пользователя не явл-ся автором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/comments/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное удаление комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев после удаления",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}