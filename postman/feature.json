{
	"info": {
		"_postman_id": "e5480106-4eac-4851-94ab-bc024b60080c",
		"name": "Test Explore With Me - Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25953607"
	},
	"item": [
		{
			"name": "Validaton",
			"item": [
				{
					"name": "Добавление комментария длиной < 5 символов",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария длиной > 500 символов",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibub\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/{1}/comments/{1}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"{1}",
								"comments",
								"{1}"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibub\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/{1}/comments/{1}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"{1}",
								"comments",
								"{1}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400\", function() {\r",
							"    pm.response.to.be.badRequest;\r",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Create comment",
			"item": [
				{
					"name": "Добавление комментария от несуществующего пользователя с id 150",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/150/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"150",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление комментария на несуществующее событие с id 150",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/150",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"150"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное добавление комментария с id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"content\"').to.eql('content');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be false').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное добавление комментария c id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be false').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"comment 2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное добавление комментария c id 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"comment 3\"').to.eql('comment 3');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be false').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"comment 3\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update comment",
			"item": [
				{
					"name": "Обновление несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"NEW content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление комментария от пользователя не яв-ся автором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"NEW content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/2/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное обновление комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"NEW content\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get comment by id",
			"item": [
				{
					"name": "Получить несуществующий комментарий",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/20",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить комментарий c id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.annotation' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('annotation');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.category.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('category');\r",
									"    pm.expect(jsonData.event.category).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.eventDate' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('eventDate');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('id');\r",
									"});\r",
									"pm.test(\"Test comment 'event.initiator.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('initiator');\r",
									"    pm.expect(jsonData.event.initiator).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment 'event.paid' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('paid');\r",
									"});\r",
									"pm.test(\"Test comment 'event.title' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('title');\r",
									"});\r",
									"pm.test(\"Test comment 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('isEdited');\r",
									"    pm.expect(jsonData.isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all event comments",
			"item": [
				{
					"name": "Получение комментариев на несуществующий event c id 150",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events/150/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"150",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев на event c id 1 без сортировки и без пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('content');\r",
									"    pm.expect(jsonData[1].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('id');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event).to.have.property('id');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[1].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев на event c id 1 c сортировкой и с пагинацией",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/events/1/comments?sortByTime=true&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sortByTime",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all user comments",
			"item": [
				{
					"name": "Получение комментариев несуществующего user c id 150",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/150/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"150",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев без сортировки и без пагинации",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('content');\r",
									"    pm.expect(jsonData[1].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('id');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event).to.have.property('id');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[1].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев c сортировкой и с пагинацией",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/users/1/comments?sortByTime=true&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users",
								"1",
								"comments"
							],
							"query": [
								{
									"key": "sortByTime",
									"value": "true"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all comments",
			"item": [
				{
					"name": "Получение комментариев по тексту",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?text=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев по id c пагинацией",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?comments=2,3&from=0&size=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "comments",
									"value": "2,3"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев по датам с сортитровкой",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('content');\r",
									"    pm.expect(jsonData[1].content, '\"content\" must be \"comment 3\"').to.eql('comment 3');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('id');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event).to.have.property('id');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[1].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[2] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('id');\r",
									"    pm.expect(jsonData[2].id, '\"id\" must be 2').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[2] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('content');\r",
									"    pm.expect(jsonData[2].content, '\"content\" must be \"comment 2\"').to.eql('comment 2');\r",
									"});\r",
									"pm.test(\"Test comment[2] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('user');\r",
									"    pm.expect(jsonData[2].user).to.have.property('id');\r",
									"    pm.expect(jsonData[2].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[2] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('user');\r",
									"    pm.expect(jsonData[2].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[2] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('event');\r",
									"    pm.expect(jsonData[2].event).to.have.property('id');\r",
									"    pm.expect(jsonData[2].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[2] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[2] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[2]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[2].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments?rangeStart=2020-11-06 02:16:15&rangeEnd=2025-11-06 02:16:15&sortByTime=true",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2020-11-06 02:16:15"
								},
								{
									"key": "rangeEnd",
									"value": "2025-11-06 02:16:15"
								},
								{
									"key": "sortByTime",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete comments",
			"item": [
				{
					"name": "Удаление комментариев по тексту",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/delete?text=2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"delete"
							],
							"query": [
								{
									"key": "text",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев после удаления по тексту",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 3\"').to.eql('comment 3');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[1] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('id');\r",
									"    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('content');\r",
									"    pm.expect(jsonData[1].content, '\"content\" must be \"NEW content\"').to.eql('NEW content');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('id');\r",
									"    pm.expect(jsonData[1].user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('user');\r",
									"    pm.expect(jsonData[1].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('event');\r",
									"    pm.expect(jsonData[1].event).to.have.property('id');\r",
									"    pm.expect(jsonData[1].event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment[1] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[1] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[1]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[1].isEdited, '\"isEdited\"  must be true').to.eql(true);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментариев по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/delete?comments=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"delete"
							],
							"query": [
								{
									"key": "comments",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев после удаления по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Test comment[0] 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('id');\r",
									"    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('content');\r",
									"    pm.expect(jsonData[0].content, '\"content\" must be \"comment 3\"').to.eql('comment 3');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('id');\r",
									"    pm.expect(jsonData[0].user.id, '\"user.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'user.name' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('user');\r",
									"    pm.expect(jsonData[0].user).to.have.property('name');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('event');\r",
									"    pm.expect(jsonData[0].event).to.have.property('id');\r",
									"    pm.expect(jsonData[0].event.id, '\"event.id\"  must be \"2\"').to.eql(2);\r",
									"});\r",
									"pm.test(\"Test comment[0] 'sendTime' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('sendTime');\r",
									"});\r",
									"pm.test(\"Test comment[0] 'isEdited' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0]).to.have.property('isEdited');\r",
									"    pm.expect(jsonData[0].isEdited, '\"isEdited\"  must be true').to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментариев по времени",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/delete?rangeStart=2020-11-06 02:16:15&rangeEnd=2025-11-06 02:16:15",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"delete"
							],
							"query": [
								{
									"key": "rangeStart",
									"value": "2020-11-06 02:16:15"
								},
								{
									"key": "rangeEnd",
									"value": "2025-11-06 02:16:15"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев после удаления по времени",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete comment by user",
			"item": [
				{
					"name": "Удаление несуществующего комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404\", function() {\r",
									"    pm.response.to.be.notFound;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное добавление нового комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Has comment create response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Test comment 'id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
									"});\r",
									"pm.test(\"Test comment 'content' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('content');\r",
									"    pm.expect(jsonData.content, '\"content\" must be \"comment 1\"').to.eql('comment 1');\r",
									"});\r",
									"pm.test(\"Test comment 'user.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('user');\r",
									"    pm.expect(jsonData.user).to.have.property('id');\r",
									"    pm.expect(jsonData.user.id, '\"user.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									"pm.test(\"Test comment 'event.id' field\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('event');\r",
									"    pm.expect(jsonData.event).to.have.property('id');\r",
									"    pm.expect(jsonData.event.id, '\"event.id\"  must be \"1\"').to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"content\": \"comment 1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/users/1/comments/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария от пользователя не явл-ся автором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/2/comments/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"2",
								"comments",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Успешное удаление комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/users/1/comments/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментариев после удаления",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Has comment get response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}